{"version":3,"sources":["AddTask.js","TaskItem.js","TaskMap.js","serviceWorker.js","index.js","App.js"],"names":["AddTask","props","_useState","useState","_useState2","Object","slicedToArray","stateTitle","setStateTitle","react_default","a","createElement","onSubmit","e","preventDefault","addTodo","style","display","type","name","flex","padding","placeholder","value","onChange","target","className","TaskItem","toggleCompletion","todo","id","title","onClick","delTodo","TaskMap","todos","map","key","Boolean","window","location","hostname","match","ReactDOM","render","toDos","setToDos","_useState3","_useState4","toDosRemaining","setToDosRemaining","useEffect","filter","task","completed","length","newTodo","uuid","v4","concat","toConsumableArray","toDo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAEeA,EAAA,SAAAC,GAAQ,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACfK,EADeH,EAAA,GACHI,EADGJ,EAAA,GAWrB,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SAPR,SAAmBC,GACjBA,EAAEC,iBACFb,EAAMc,QAAQR,GACdC,EAAc,KAIYQ,MAAO,CAAEC,QAAS,SAC1CR,EAAAC,EAAAC,cAAA,SACEO,KAAK,OACLC,KAAK,QACLH,MAAO,CAACI,KAAM,KAAMC,QAAS,OAC7BC,YAAY,kBACZC,MAAOhB,EACPiB,SAhBW,SAAAX,GAAKL,EAAcK,EAAEY,OAAOF,UAkBzCd,EAAAC,EAAAC,cAAA,SACEO,KAAK,SACLK,MAAM,SACNG,UAAU,MACVV,MAAO,CAAEI,KAAM,SCzBRO,EAAA,SAAA1B,GACb,OACEQ,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWM,SAAU,kBAAIvB,EAAM2B,iBAAiB3B,EAAM4B,KAAKC,OADzE,IACkF,IAC/E7B,EAAM4B,KAAKE,MACZtB,EAAAC,EAAAC,cAAA,UAAQqB,QAAS,kBAAI/B,EAAMgC,QAAQhC,EAAM4B,KAAKC,MAA9C,QCNOI,EAAA,SAACjC,GACd,OAAOA,EAAMkC,MAAMC,IAAI,SAACP,GAAD,OACrBpB,EAAAC,EAAAC,cAACgB,EAAD,CAAUU,IAAKR,EAAKC,GAAID,KAAMA,EAAMD,iBAAkB3B,EAAM2B,iBAAkBK,QAAShC,EAAMgC,mBCO7EK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cCCD,WAAK,IAAAT,EACQC,mBAAS,IADjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACX2C,EADWzC,EAAA,GACJ0C,EADI1C,EAAA,GAAA2C,EAE0B5C,mBAAS,GAFnC6C,EAAA3C,OAAAC,EAAA,EAAAD,CAAA0C,EAAA,GAEXE,EAFWD,EAAA,GAEKE,EAFLF,EAAA,GA6BlB,OAFAG,oBAAU,WAAQD,EAAkBL,EAAMO,OAAO,SAAAC,GAAI,OAAKA,EAAKC,YAAWC,SAAW,CAACV,IAGpFpC,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OACbjB,EAAAC,EAAAC,cAACX,EAAD,CAASe,QA1Bb,SAAiBgB,GACf,IAAMyB,EAAU,CACd1B,GAAI2B,IAAKC,KACT3B,QACAuB,WAAW,GAEbR,EAAQ,GAAAa,OAAAtD,OAAAuD,EAAA,EAAAvD,CAAKwC,GAAL,CAAYW,QAqBlB/C,EAAAC,EAAAC,cAAA,iCACsBsC,EADtB,MACyCJ,EAAMU,QAE/C9C,EAAAC,EAAAC,cAACuB,EAAD,CAAOC,MAAOU,EAAOjB,iBArBzB,SAA0BE,GACxBgB,EAASD,EAAMT,IAAI,SAAAyB,GAIb,OAHGA,EAAK/B,KAAOA,IACb+B,EAAKP,WAAaO,EAAKP,WAElBO,MAgB8C5B,QAZ7D,SAAiBH,GACfgB,EAASzC,OAAAuD,EAAA,EAAAvD,CAAIwC,EAAMO,OAAO,SAAAvB,GAAI,OAAIA,EAAKC,KAAOA,WDzBlC,MAASgC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c0bd7e7.chunk.js","sourcesContent":["import React, { useState} from 'react';\n\nexport default props =>{\n  const[stateTitle, setStateTitle] = useState('')\n\n  const onChange = e=> {setStateTitle(e.target.value)}\n\n  function onSubmit (e) {\n    e.preventDefault();\n    props.addTodo(stateTitle);\n    setStateTitle('');\n  }\n\n  return (\n    <form onSubmit={onSubmit} style={{ display: 'flex'}}>\n      <input\n        type=\"text\"\n        name=\"title\"\n        style={{flex: '10', padding: '5px'}}\n        placeholder=\"Type in a To Do\"\n        value={stateTitle}\n        onChange={onChange}\n      />\n      <input\n        type=\"submit\"\n        value=\"submit\"\n        className=\"btn\"\n        style={{ flex: '1'}}\n      />\n    </form>\n  )\n}\n","import React from 'react';\n\nexport default props=> {\n  return (\n    <div>\n\n      <p>\n        <input type=\"checkbox\" onChange={()=>props.toggleCompletion(props.todo.id)} /> {' '}\n        {props.todo.title}\n        <button onClick={()=>props.delTodo(props.todo.id)}>x</button>\n      </p>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport TodoItem from './TaskItem';\n\nexport default (props) =>{\n  return props.todos.map((todo) => (\n    <TodoItem key={todo.id} todo={todo} toggleCompletion={props.toggleCompletion} delTodo={props.delTodo} />\n  ));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{useState, useEffect} from 'react';\nimport uuid from 'uuid';\n\nimport AddToDo from './AddTask'\nimport ToDos from './TaskMap'\nimport './App.css';\n\nexport default () =>{\n  const [toDos, setToDos] = useState([]);\n  const [toDosRemaining, setToDosRemaining] = useState(0);\n\n\n  function addToDo(title){\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    setToDos([...toDos, newTodo]);\n  }\n\n  function toggleCompletion(id){\n    setToDos(toDos.map(toDo => {\n          if(toDo.id === id) {\n            toDo.completed = !toDo.completed\n          }\n          return toDo;\n        }));\n  }\n\n  function delToDo(id){\n    setToDos([...toDos.filter(todo => todo.id !== id)])\n  }\n\n  useEffect(() => { setToDosRemaining(toDos.filter(task => !task.completed).length) }, [toDos]);\n\n  return (\n    <div className=\"App\">\n      <AddToDo addTodo={addToDo} />\n      <div>\n        To Dos Remaining : {toDosRemaining} / {toDos.length}\n      </div>\n      <ToDos todos={toDos} toggleCompletion={toggleCompletion} delTodo={delToDo} />\n    </div>\n  );\n}\n"],"sourceRoot":""}